Imports System.IO
Imports System.Xml
Imports System.Text
Imports System.Reflection
Imports System.Web.Script.Serialization
Imports ICSharpCode.SharpZipLib.Zip
Public Partial Class frmExport
    Private VmFormMove As Boolean = False       'Formulaire en déplacement
    Private VmMousePos As Point                 'Position initiale de la souris sur la barre de titre
    Private VmCanClose As Boolean = False       'Formulaire peut être fermé
    Private VmMustReload As Boolean = False     'Rechargement des menus obligatoires dans le père
    Private VmFormat As mdlConstGlob.eFormat    'Format de fichier choisi pour l'export en cours
    Private VmOwner As MainForm
    Public Sub New(VpOwner As MainForm)
        Call Me.InitializeComponent
        VmOwner = VpOwner
    End Sub
    Private Sub SourcesLoad
    '-------------------------------
    'Affiche les sources exportables
    '-------------------------------
        Me.lstchkSources.Items.Clear
        Me.lstImp.Items.Clear
        Me.lstchkSources.Items.Add(mdlConstGlob.CgCollection)
        Me.lstImp.Items.Add(mdlConstGlob.CgCollection)
        VgDBCommand.CommandText = "Select GameName From MyGamesID Where IsFolder = False Order By GameID;"
        VgDBReader = VgDBCommand.ExecuteReader
        With VgDBReader
            While .Read
                Me.lstchkSources.Items.Add(.GetString(0))
                Me.lstImp.Items.Add(.GetString(0))
            End While
            .Close
        End With
    End Sub
    Private Sub GoExport(VpPath As String, VpSource As String)
    '------------------------------------------------------
    'Exporte la table spécifiée dans le répertoire spécifié
    '------------------------------------------------------
    Dim VpOut As New StreamWriter(VpPath)
    Dim VpIsCollection As Boolean = ( VpSource = mdlConstGlob.CgCollection )
        'En-tête
        Select Case VmFormat
            Case mdlConstGlob.eFormat.Apprentice
                VpOut.WriteLine("// NAME : " + VpSource)
                VpOut.WriteLine("// CREATOR : " + Environment.UserName)
                VpOut.WriteLine("// FORMAT :")
            Case mdlConstGlob.eFormat.MWS
                VpOut.WriteLine("// Deck file for Magic Workstation generated by MTGM (http://mtgm.free.fr)")
                VpOut.WriteLine("")
            Case Else
        End Select
        VgDBCommand.CommandText = "Select Card.EncNbr, Items, Card.Title, Card.Series, Series.SeriesCD_MW, Foil, Series.SeriesCD_MW, Card.CardNbr" + If(VpIsCollection, "", ", Reserve") + " From (Card Inner Join Series On Card.Series = Series.SeriesCD) Inner Join " + If(VpIsCollection, "MyCollection On MyCollection.EncNbr = Card.EncNbr;", "MyGames On MyGames.EncNbr = Card.EncNbr Where GameID = " + mdlToolbox.GetDeckIdFromName(VpSource) + ";")
        VgDBReader = VgDBCommand.ExecuteReader
        'Corps
        With VgDBReader
            While .Read
                Select Case VmFormat
                    Case mdlConstGlob.eFormat.Apprentice
                        VpOut.WriteLine("        " + .GetValue(1).ToString + " " + .GetString(2))
                    Case mdlConstGlob.eFormat.MTGArena
                        VpOut.WriteLine(.GetValue(1).ToString + " " + .GetString(2) + " (" + .GetString(6) + ") " + .GetValue(7).ToString)
                    Case mdlConstGlob.eFormat.MTGM
                        VpOut.WriteLine(.GetValue(0).ToString + "#" + .GetValue(1).ToString)
                    Case mdlConstGlob.eFormat.MTGMv2
                        VpOut.WriteLine(.GetValue(2).ToString + "#" + .GetValue(3).ToString + "#" + .GetValue(1).ToString + "#" + .GetValue(5).ToString + If(VpIsCollection, "", "#" + .GetValue(8).ToString))
                    Case mdlConstGlob.eFormat.MWS
                        VpOut.WriteLine(If(VpIsCollection, "", If(.GetBoolean(8), "SB:", "")) + "    " + .GetValue(1).ToString + " [" + .GetValue(4).ToString + "] " + .GetValue(2).ToString)
                    Case Else
                End Select
            End While
            .Close
        End With
        VpOut.Flush
        VpOut.Close
    End Sub
    Private Sub GoExportJSON(VpPath As String, VpSource As String)
    Dim VpIsCollection As Boolean = ( VpSource = mdlConstGlob.CgCollection )
    Dim VpUrzaId As String
    Dim VpQte As Integer
    Dim VpQteFoil As Integer
    Dim VpUgs As New clsUrzaGathererInfos
    Dim VpJSON As String
    Dim VpOut As StreamWriter
    Dim VpSerializer As New JavaScriptSerializer
        'Initialisation des dictionnaires qui seront sérialisés
        VpUgs.Count = New Dictionary(Of String, Integer)
        VpUgs.Foils = New Dictionary(Of String, Integer)
        VpUgs.Promos = New Dictionary(Of String, Integer)       'non utilisé pour l'instant
        VpUgs.Conditions = New Dictionary(Of String, Integer)   'non utilisé pour l'instant
        'Requête
        VgDBCommand.CommandText = "Select UrzaId, Items, Foil From (Card Inner Join Series On Card.Series = Series.SeriesCD) Inner Join " + If(VpIsCollection, "MyCollection On MyCollection.EncNbr = Card.EncNbr;", "MyGames On MyGames.EncNbr = Card.EncNbr Where GameID = " + mdlToolbox.GetDeckIdFromName(VpSource) + ";")
        VgDBReader = VgDBCommand.ExecuteReader
        With VgDBReader
            While .Read
                'Récupère l'identifiant Urza Gatherer s'il existe
                If Not .IsDBNull(0) Then
                    VpUrzaId = CLng(.GetValue(0)).ToString
                Else
                    VpUrzaId = 0
                End If
                'Dans ce format, la quantité de cartes est exprimée sous la forme "[quantité totale] dont [quantité foil]"
                VpQte = CInt(.GetValue(1)) + CInt(.GetValue(2))
                VpQteFoil = CInt(.GetValue(2))
                'Ne poursuite que si l'identifiant est valide
                If VpUrzaId <> 0 Then
                    'Vérifie qu'on a pas déjà fait le traitement sur des cartes identiques précédentes (auquel cas on somme les quantités)
                    If VpUgs.Count.ContainsKey(VpUrzaId) Then
                        VpQte += VpUgs.Count.Item(VpUrzaId)
                        VpUgs.Count.Remove(VpUrzaId)
                    End If
                    If VpUgs.Foils.ContainsKey(VpUrzaId) Then
                        VpQteFoil += VpUgs.Foils.Item(VpUrzaId)
                        VpUgs.Foils.Remove(VpUrzaId)
                    End If
                    'Insertion effective
                    If VpQte > 0 Then
                        VpUgs.Count.Add(VpUrzaId, VpQte)
                    End If
                    If VpQteFoil > 0 Then
                        VpUgs.Foils.Add(VpUrzaId, VpQteFoil)
                    End If
                End If
            End While
            .Close
        End With
        'Sérialisation effective
        VpJSON = VpSerializer.Serialize(VpUgs)
        VpOut = New StreamWriter(VpPath)
        VpOut.Write(VpJSON)
        VpOut.Flush
        VpOut.Close
    End Sub
    Private Sub GoExportWeb(VpPath As String, VpSources As List(Of String))
    Dim VpMyHTML As Stream = Assembly.GetExecutingAssembly.GetManifestResourceStream("MyHTML")
    Dim VpZipStream As ZipInputStream
    Dim VpZipEntry As ZipEntry
        If Not Directory.Exists(Path.GetTempPath + mdlConstGlob.CgTemp) Then
            Directory.CreateDirectory(Path.GetTempPath + mdlConstGlob.CgTemp)
        End If
        'Extrait le fichier ZIP des ressources dans le répertoire temporaire
        Using VpFile As Stream = File.OpenWrite(Path.GetTempPath + mdlConstGlob.CgTemp + mdlConstGlob.CgColViewerZipRes)
            Call mdlToolbox.CopyStream(VpMyHTML, VpFile)
        End Using
        'Puis le décompresse dans le répertoire final
        VpZipStream = New ZipInputStream(File.OpenRead(Path.GetTempPath + mdlConstGlob.CgTemp + mdlConstGlob.CgColViewerZipRes))
        Do
            VpZipEntry = VpZipStream.GetNextEntry
            If VpZipEntry IsNot Nothing Then
                If VpZipEntry.IsFile Then
                    If VpZipEntry.Name <> "" Then
                        Using VpFile As Stream = File.OpenWrite(VpPath + "\" + VpZipEntry.Name)
                            Call mdlToolbox.CopyStream(VpZipStream, VpFile)
                        End Using
                    End If
                ElseIf VpZipEntry.IsDirectory Then
                    If Not Directory.Exists(VpPath + "\" + VpZipEntry.Name) Then
                        Directory.CreateDirectory(VpPath + "\" + VpZipEntry.Name)
                    End If
                End If
            Else
                Exit Do
            End If
        Loop
        VpZipStream.Close
        'Génère pour finir le fichier de contenu
        Cursor.Current = Cursors.WaitCursor
        Call Me.JSONExport(VpSources)
        'Affichage de la page HTML
        Process.Start(VpPath + "\index.html")
    End Sub
    Private Sub JSONExport(VpSources As List(Of String))
    '------------------------------------------------------------------------------------
    'Construction d'un fichier d'export JSON qui sera lisible par le HTMLCollectionViewer
    '------------------------------------------------------------------------------------
    Dim VpContent As New List(Of clsCardInfos)
    Dim VpCur As clsCardInfos
    Dim VpJSON As String
    Dim VpOut As StreamWriter
    Dim VpSerializer As New JavaScriptSerializer
        For Each VpDeck As String In VpSources
            If VpDeck = mdlConstGlob.CgCollection Then
                VgDBCommand.CommandText = "Select * From ((((((MyCollection Inner Join Card On MyCollection.EncNbr = Card.EncNbr) Inner Join Spell On Card.Title = Spell.Title) Inner Join Series On Card.Series = Series.SeriesCD) Inner Join CardFR On Card.EncNbr = CardFR.EncNbr) Inner Join TextesFR On TextesFR.CardName = Card.Title) Left Join Creature On Card.Title = Creature.Title) Left Join SubTypes On Card.SubType = SubTypes.SubTypeVO;"
            Else
                VgDBCommand.CommandText = "Select * From (((((((MyGames Inner Join MyGamesID On MyGames.GameID = MyGamesID.GameID) Inner Join Card On MyGames.EncNbr = Card.EncNbr) Inner Join Spell On Card.Title = Spell.Title) Inner Join Series On Card.Series = Series.SeriesCD) Inner Join CardFR On Card.EncNbr = CardFR.EncNbr) Inner Join TextesFR On TextesFR.CardName = Card.Title) Left Join Creature On Card.Title = Creature.Title) Left Join SubTypes On Card.SubType = SubTypes.SubTypeVO Where MyGamesID.GameName = '" + VpDeck.Replace("'", "''") + "';"
            End If
            VgDBReader = VgDBCommand.ExecuteReader
            With VgDBReader
                While .Read
                    VpCur = New clsCardInfos
                    VpCur.Color = mdlToolbox.MatchColor(.GetValue(.GetOrdinal("Color")).ToString)
                    VpCur.Cost = .GetValue(.GetOrdinal("Cost")).ToString
                    VpCur.EncNbr = CLng(.GetValue(.GetOrdinal("Card.EncNbr")))
                    VpCur.Items = CInt(.GetValue(.GetOrdinal("Items")))
                    VpCur.Power = .GetValue(.GetOrdinal("Power")).ToString
                    VpCur.Price = .GetValue(.GetOrdinal("Price"))
                    VpCur.Rarity = .GetValue(.GetOrdinal("Rarity")).ToString
                    VpCur.Series = .GetValue(.GetOrdinal("SeriesCD")).ToString
                    VpCur.SeriesNM_FR = .GetValue(.GetOrdinal("SeriesNM_FR")).ToString
                    VpCur.SeriesNM_MtG = .GetValue(.GetOrdinal("SeriesNM_MtG")).ToString
                    VpCur.SubTypeVF = .GetValue(.GetOrdinal("SubTypeVF")).ToString
                    VpCur.TexteFR = .GetValue(.GetOrdinal("TexteFR")).ToString.Trim
                    VpCur.Title = .GetString(.GetOrdinal("Card.Title"))
                    VpCur.TitleFR = .GetString(.GetOrdinal("TitleFR"))
                    VpCur.Tough = .GetValue(.GetOrdinal("Tough")).ToString
                    VpCur.MultiverseId = CLng(.GetValue(.GetOrdinal("MultiverseId")))
                    VpContent.Add(VpCur)
                End While
                .Close
            End With
            VpSerializer.MaxJsonLength = Integer.MaxValue
            VpJSON = VpSerializer.Serialize(VpContent)
            VpJSON = "var collection = '" + VpJSON.Replace("\", "\\") + "';"
            If Not Directory.Exists(Me.dlgBrowser.SelectedPath + "\data") Then
                Directory.CreateDirectory(Me.dlgBrowser.SelectedPath + "\data")
            End If
            VpOut = New StreamWriter(Me.dlgBrowser.SelectedPath + "\data\collection.js")
            VpOut.Write(VpJSON)
            VpOut.Flush
            VpOut.Close
        Next VpDeck
    End Sub
    Private Function JSONBypass(VpStr As String, VpSection As String) As Dictionary(Of String, Integer)
    '--------------------------------------------------------------------------------------------------------------------------------------
    'Désérialisation manuelle de dictionnaire <String, Integer> à cause d'un bug dans le Framework 3.5
    'Le problème n'a pas lieu en targetant le 4.0 via JavaScriptSerializer.Deserialize, mais je préfère rester en 3.5 pour d'autres raisons
    '--------------------------------------------------------------------------------------------------------------------------------------
    Dim VpJSON As String
    Dim VpItems() As String
    Dim VpPair() As String
    Dim VpKey As String
    Dim VpValue As Integer
    Dim VpLast As Boolean
    Dim VpOut As New Dictionary(Of String, Integer)
        If Not VpStr.Contains(VpSection) Then Return Nothing
        VpJSON = VpStr.Substring(VpStr.IndexOf(VpSection) - 2)
        VpItems = VpJSON.Replace("{""" + VpSection + """:{", "").Replace(",""" + VpSection + """:{", "").Split(", """)
        For Each VpItem As String In VpItems
            VpLast = VpItem.Contains("}")
            If VpItem.Length > 1 Then
                VpPair = VpItem.Replace("""", "").Replace("}", "").Split(":")
                VpKey = VpPair(0)
                VpValue = CInt(Val(VpPair(1)))
                If VpValue > 0 Then
                    If Not VpOut.ContainsKey(VpKey) Then
                        VpOut.Add(VpKey, VpValue)
                    Else
                        VpOut.Item(VpKey) += VpValue    'si doublon sur la clé (= multiverse id), on somme les quantités
                    End If
                End If
            End If
            If VpLast Then
                Exit For
            End If
        Next VpItem
        Return VpOut
    End Function
    Private Sub GoImport(VpPath As String, VpSource As String, VpIsNew As Boolean)
    '--------------------------------------------------------------------------------------------------
    'Importe le fichier spécifié à la destination spécifiée (collection ou nouveau deck ou ancien deck)
    '--------------------------------------------------------------------------------------------------
    Dim VpIn As StreamReader
    Dim VpReader As XmlTextReader
    Dim VpLog As StreamWriter
    Dim VpConverted As StreamWriter
    Dim VpUgs As clsUrzaGathererInfos
    Dim VpStrs(0 To 1) As String
    Dim VpStr As String
    Dim VpId As Integer
    Dim VpSQL As String
    Dim VpO As Object
    Dim VpFoil As Boolean
    Dim VpReserve As Boolean
    Dim VpName As String
    Dim VpEdition As String
    Dim VpQte As Integer
    Dim VpQteFoil As Integer
    Dim VpNeedLog As Boolean = False
        Cursor.Current = Cursors.WaitCursor
        VpIn = New StreamReader(VpPath.ToLower.Replace(mdlConstGlob.CgFExtX, mdlConstGlob.CgFExtO), Encoding.UTF8)
        If VpIn.EndOfStream Then Return
        'S'il s'agit d'un nouveau deck, l'inscrit en BDD
        If VpIsNew Then
            VpId = mdlToolbox.GetNewDeckId
            VgDBCommand.CommandText = "Insert Into MyGamesID(GameID, GameName, AdvID, GameDate, GameFormat, GameDescription, Parent, IsFolder) Values (" + VpId.ToString + ", '" + VpSource.Replace("'", "''") + "', 0, '" + Now.ToShortDateString + "', '" + mdlConstGlob.CgDefaultFormat + "', '', Null, False);"
            VgDBCommand.ExecuteNonQuery
        End If
        Select Case VpPath.Substring(VpPath.LastIndexOf(".")).ToLower
            '** Gestion formats MTGM **
            Case mdlConstGlob.CgFExtO, mdlConstGlob.CgFExtN
                VpStrs = VpIn.ReadLine.Split("#")
                'Vérifie qu'il n'y a pas une confusion avec le format XMage
                If VpStrs.Length < 2 AndAlso VpStrs(0).Contains(":") Then
                    VpIn.Close
                    Call Me.GoImport(VpPath.ToLower.Replace(mdlConstGlob.CgFExtO, mdlConstGlob.CgFExtX), VpSource, False)
                    Exit Sub
                End If
                'Lecture du fichier d'entrée et ajout dans la base de données
                While True
                    VpName = VpStrs(0)
                    VpEdition = VpStrs(1)
                    'Pré-traitement 1 : dans le cas du nouveau format d'exportation v2, il faut d'abord retrouver le numéro encyclopédique correspondant au nom de la carte et son édition
                    If VpStrs.Length > 2 AndAlso VpStrs(2) <> "" Then
                        VpStrs(0) = mdlToolbox.GetEncNbr(VpStrs(0), VpStrs(1))
                        VpStrs(1) = VpStrs(2)
                    End If
                    'Pré-traitement 2 : gestion éventuelle de la mention foil
                    If VpStrs.Length > 3 Then
                        VpFoil = mdlToolbox.Matching(VpStrs(3))
                    Else
                        VpFoil = False
                    End If
                    'Pré-traitement 3 : gestion éventuelle de la mention réserve
                    If VpStrs.Length > 4 Then
                        VpReserve = mdlToolbox.Matching(VpStrs(4))
                    Else
                        VpReserve = False
                    End If
                    If IsNumeric(VpStrs(0)) AndAlso CInt(VpStrs(0)) <> 0 Then
                        'Cas 1 : nouveau deck
                        If VpIsNew Then
                            VpSQL = "Insert Into MyGames(EncNbr, Items, GameID, Foil, Reserve) Values (" + VpStrs(0) + ", " + VpStrs(1) + ", " + VpId.ToString + ", " + VpFoil.ToString + ", " + VpReserve.ToString + ");"
                        Else
                            'Cas 2 : complément collection
                            If VpSource = mdlConstGlob.CgCollection Then
                                VgDBCommand.CommandText = "Select Items From MyCollection Where EncNbr = " + VpStrs(0) + " And Foil = " + VpFoil.ToString + ";"
                                VpO = VgDBCommand.ExecuteScalar
                                'Cas 2.1 : la carte a ajouté existe déjà => mise à jour de la quantité somme
                                If Not VpO Is Nothing AndAlso CInt(VpO) > 0 Then
                                    VpSQL = "Update MyCollection Set Items = " + (CInt(VpO) + CInt(VpStrs(1))).ToString + " Where EncNbr = " + VpStrs(0) + " And Foil = " + VpFoil.ToString + ";"
                                'Cas 2.2 : nouvelle carte => insertion
                                Else
                                    VpSQL = "Insert Into MyCollection(EncNbr, Items, Foil) Values (" + VpStrs(0) + ", " + VpStrs(1) + ", " + VpFoil.ToString + ");"
                                End If
                            'Cas 3 : complément ancien deck
                            Else
                                VgDBCommand.CommandText = "Select Items From MyGames Where EncNbr = " + VpStrs(0) + " And Foil = " + VpFoil.ToString + " And Reserve = " + VpReserve.ToString + " And GameID = " + mdlToolbox.GetDeckIdFromName(VpSource) + ";"
                                VpO = VgDBCommand.ExecuteScalar
                                'Cas 3.1 : la carte a ajouté existe déjà => mise à jour de la quantité somme
                                If Not VpO Is Nothing AndAlso CInt(VpO) > 0 Then
                                    VpSQL = "Update MyGames Set Items = " + (CInt(VpO) + CInt(VpStrs(1))).ToString + " Where EncNbr = " + VpStrs(0) + " And Foil = " + VpFoil.ToString + " And Reserve = " + VpReserve.ToString + " And GameID = " + mdlToolbox.GetDeckIdFromName(VpSource) + ";"
                                'Cas 3.2 : nouvelle carte => insertion
                                Else
                                    VpSQL = "Insert Into MyGames(EncNbr, Items, GameID, Foil, Reserve) Values (" + VpStrs(0) + ", " + VpStrs(1) + ", " + mdlToolbox.GetDeckIdFromName(VpSource) + ", " + VpFoil.ToString + ", " + VpReserve.ToString + ");"
                                End If
                            End If
                        End If
                        VgDBCommand.CommandText = VpSQL
                        VgDBCommand.ExecuteNonQuery
                    Else
                        Call mdlToolbox.ShowWarning("Impossible d'importer : " + VpName + " (" + VpEdition.ToUpper + ")")
                    End If
                    If VpIn.EndOfStream Then Exit While
                    VpStrs = VpIn.ReadLine.Split("#")
                End While
                VpIn.Close
            '** Gestion format Magic Master **
            Case mdlConstGlob.CgFExtM
                VpReader = New XmlTextReader(VpIn)
                VpLog = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtM, mdlConstGlob.CgPicLogExt))
                VpConverted = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtM, mdlConstGlob.CgFExtO))
                Try
                    While VpReader.Read
                        If VpReader.Name = "NOM" Then
                            VpName = VpReader.ReadElementContentAsString
                            VpReader.ReadToFollowing("EDITION")
                            VpEdition = VpReader.ReadElementContentAsString
                            VpReader.ReadToFollowing("QTE")
                            VpQte =  VpReader.ReadElementContentAsInt
                            VpReader.ReadToFollowing("FOIL")
                            VpQteFoil = VpReader.ReadElementContentAsInt
                            'Exact match
                            VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where Card.Title = '" + VpName.Replace("'", "''") + "' And (Series.SeriesNM = '" + VpEdition.Replace("'", "''") + "' Or Series.SeriesNM_MtG = '" + VpEdition.Replace("'", "''") + "');"
                            VpO = VgDBCommand.ExecuteScalar
                            If Not VpO Is Nothing Then
                                If VpQteFoil > 0 Then
                                    VpConverted.WriteLine(VpO.ToString + "#" + (VpQte - VpQteFoil).ToString + "##False")
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQteFoil.ToString + "##True")
                                Else
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False")
                                End If
                            Else
                                VpNeedLog = True
                                'Partial match
                                VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where ('" + VpName.Replace("'", "''") + "' Like '%' + Card.Title + '%' Or Card.Title Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%') And (InStr('" + VpEdition.Replace("'", "''") + "', Series.SeriesNM) > 0 Or InStr('" + VpEdition.Replace("'", "''") + "', Series.SeriesNM_MtG) > 0);"
                                VpO = VgDBCommand.ExecuteScalar
                                If Not VpO Is Nothing Then
                                    VpLog.WriteLine("Partial match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                    If VpQteFoil > 0 Then
                                        VpConverted.WriteLine(VpO.ToString + "#" + (VpQte - VpQteFoil).ToString + "##False")
                                        VpConverted.WriteLine(VpO.ToString + "#" + VpQteFoil.ToString + "##True")
                                    Else
                                        VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False")
                                    End If
                                Else
                                    VpLog.WriteLine("No match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                End If
                            End If
                        End If
                    End While
                Catch
                    Call mdlToolbox.ShowWarning("L'importation s'est arrêtée prématurément car le fichier XML source présentait une erreur..." + vbCrLf + "Assurez-vous qu'il ne contienne pas les caractères suivants : &, < et >")
                End Try
                VpConverted.Close
                VpLog.Close
                VpReader.Close
                VpIn.Close
                If VpNeedLog Then
                    If mdlToolbox.ShowQuestion("Certaines cartes n'ont pas été trouvées..." + vbCrLf + "Voulez-vous afficher le journal ?") = System.Windows.Forms.DialogResult.Yes Then
                        Process.Start(VpPath.ToLower.Replace(mdlConstGlob.CgFExtM, mdlConstGlob.CgPicLogExt))
                    End If
                End If
                'Une fois la conversion effectuée, on rappelle l'importation sur le fichier au bon format
                Call Me.GoImport(VpPath.ToLower.Replace(mdlConstGlob.CgFExtM, mdlConstGlob.CgFExtO), VpSource, False)
            '** Gestion formats Magic Workstation ou XMage **
            Case mdlConstGlob.CgFExtW.ToLower, mdlConstGlob.CgFExtX
                VpLog = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtW.ToLower, mdlConstGlob.CgPicLogExt).Replace(mdlConstGlob.CgFExtX, mdlConstGlob.CgPicLogExt))
                VpConverted = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtW.ToLower, ".2" + mdlConstGlob.CgFExtO).Replace(mdlConstGlob.CgFExtX, ".2" + mdlConstGlob.CgFExtO))
                While Not VpIn.EndOfStream
                    VpStr = VpIn.ReadLine
                    If VpStr.Contains("[") Then
                        VpReserve = VpStr.Contains("SB:")
                        VpStr = VpStr.Replace("SB:", "")
                        VpQte = CInt(Val(VpStr.Substring(0, VpStr.IndexOf("["))))
                        VpEdition = VpStr.Substring(VpStr.IndexOf("[") + 1)
                        VpEdition = VpEdition.Substring(0, VpEdition.IndexOf("]"))
                        VpName = VpStr.Substring(VpStr.IndexOf("]") + 1).Trim
                        'Particularité XMage
                        If VpEdition.Contains(":") Then
                            VpEdition = VpEdition.Substring(0, VpEdition.IndexOf(":"))
                        End If
                        'Exact match
                        VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where Title = '" + VpName.Replace("'", "''") + "' And SeriesCD_MW = '" + VpEdition + "';"
                        VpO = VgDBCommand.ExecuteScalar
                        If Not VpO Is Nothing Then
                            VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False" + "#" + VpReserve.ToString)
                        Else
                            VpNeedLog = True
                            'Partial match
                            VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where ('" + VpName.Replace("'", "''") + "' Like '%' + Title + '%' Or Title Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%') And SeriesCD_MW = '" + VpEdition + "';"
                            VpO = VgDBCommand.ExecuteScalar
                            If Not VpO Is Nothing Then
                                VpLog.WriteLine("Partial match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False" + "#" + VpReserve.ToString)
                            Else
                                VpLog.WriteLine("No match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                            End If
                        End If
                    End If
                End While
                VpStr = CType(VpConverted.BaseStream, FileStream).Name
                VpConverted.Close
                VpLog.Close
                VpIn.Close
                If VpNeedLog Then
                    If mdlToolbox.ShowQuestion("Certaines cartes n'ont pas été trouvées..." + vbCrLf + "Voulez-vous afficher le journal ?") = System.Windows.Forms.DialogResult.Yes Then
                        Process.Start(VpPath.ToLower.Replace(mdlConstGlob.CgFExtW.ToLower, mdlConstGlob.CgPicLogExt).Replace(mdlConstGlob.CgFExtX, mdlConstGlob.CgPicLogExt))
                    End If
                End If
                'Une fois la conversion effectuée, on rappelle l'importation sur le fichier au bon format
                Call Me.GoImport(VpStr, VpSource, False)
            '** Gestion format Urza Gatherer **
            Case mdlConstGlob.CgFExtU
                VpLog = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtU, mdlConstGlob.CgPicLogExt))
                VpConverted = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtU, mdlConstGlob.CgFExtO))
                VpStr = VpIn.ReadToEnd
                VpUgs = New clsUrzaGathererInfos
                'On récupère les identifiants Urza Gatherer
                VpUgs.Count = Me.JSONBypass(VpStr, "Count")
                VpUgs.Foils = Me.JSONBypass(VpStr, "Foils")
                VpUgs.Promos = Me.JSONBypass(VpStr, "Promos")           'non utilisé pour l'instant
                VpUgs.Conditions = Me.JSONBypass(VpStr, "Conditions")   'non utilisé pour l'instant
                For Each VpCardId As String In VpUgs.Count.Keys
                    'Exact match
                    VgDBCommand.CommandText = "Select EncNbr From Card Where UrzaId = " + VpCardId + ";"
                    VpO = VgDBCommand.ExecuteScalar
                    If Not VpO Is Nothing Then
                        VpQte = VpUgs.Count.Item(VpCardId)
                        If VpUgs.Foils IsNot Nothing AndAlso VpUgs.Foils.ContainsKey(VpCardId) Then
                            VpQteFoil = VpUgs.Foils.Item(VpCardId)
                            VpConverted.WriteLine(VpO.ToString + "#" + VpQteFoil.ToString + "##True")
                            If VpQte - VpQteFoil > 0 Then
                                VpConverted.WriteLine(VpO.ToString + "#" + (VpQte - VpQteFoil).ToString + "##False")
                            End If
                        Else
                            VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False")
                        End If
                    Else
                        VpNeedLog = True
                        VpLog.WriteLine("No match for Multiverse Id: " + VpCardId)
                    End If
                Next VpCardId
                VpConverted.Close
                VpLog.Close
                VpIn.Close
                If VpNeedLog Then
                    If mdlToolbox.ShowQuestion("Certaines cartes n'ont pas été trouvées..." + vbCrLf + "Voulez-vous afficher le journal ?") = System.Windows.Forms.DialogResult.Yes Then
                        Process.Start(VpPath.ToLower.Replace(mdlConstGlob.CgFExtU, mdlConstGlob.CgPicLogExt))
                    End If
                End If
                'Une fois la conversion effectuée, on rappelle l'importation sur le fichier au bon format
                Call Me.GoImport(VpPath.ToLower.Replace(mdlConstGlob.CgFExtU, mdlConstGlob.CgFExtO), VpSource, False)
            '** Gestion formats Magic Online ou export d'Urza Gatherer **
            Case mdlConstGlob.CgFExtL
                VpLog = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtL, mdlConstGlob.CgPicLogExt))
                VpConverted = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtL, mdlConstGlob.CgFExtO))
                While Not VpIn.EndOfStream
                    VpStr = VpIn.ReadLine
                    VpStr = VpStr.Replace(", ", "¤")    'attention, si des noms contiennent une virgule, on ne veut pas splitter dessus
                    If VpStr.Contains(",") Then
                        VpStrs = VpStr.Split(",")
                        'Cas 1 : Magic Online
                        If VpStrs.Length = 7 AndAlso IsNumeric(VpStrs(1)) Then
                            VpQte = CInt(Val(VpStrs(1)))
                            VpEdition = VpStrs(4).Replace("¤", ", ")
                            VpName = VpStrs(0).Replace("¤", ", ")
                            VpFoil = ( VpStrs(6).ToLower = "yes" )
                            'Exact match
                            VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where Title = '" + VpName.Replace("'", "''") + "' And SeriesCD_MO = '" + VpEdition + "';"
                            VpO = VgDBCommand.ExecuteScalar
                            If Not VpO Is Nothing Then
                                VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##" + VpFoil.ToString)
                            Else
                                VpNeedLog = True
                                'Partial match
                                VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where ('" + VpName.Replace("'", "''") + "' Like '%' + Title + '%' Or Title Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%') And SeriesCD_MO = '" + VpEdition + "';"
                                VpO = VgDBCommand.ExecuteScalar
                                If Not VpO Is Nothing Then
                                    VpLog.WriteLine("Partial match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##" + VpFoil.ToString)
                                Else
                                    VpLog.WriteLine("No match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                End If
                            End If
                        'Cas 2 : Urza Gatherer
                        ElseIf VpStrs.Length = 18 AndAlso VpStrs(0).StartsWith("""") Then
                            VpQte = CInt(Val(VpStrs(9)))
                            VpQteFoil = CInt(Val(VpStrs(10)))
                            VpEdition = VpStrs(14).Replace("""", "").Replace("¤", ", ")
                            VpName = VpStrs(0).Replace("""", "").Replace("¤", ", ")
                            'Exact match
                            VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where Card.Title = '" + VpName.Replace("'", "''") + "' And Series.SeriesNM_UG = '" + VpEdition.Replace("'", "''") + "';"
                            VpO = VgDBCommand.ExecuteScalar
                            If Not VpO Is Nothing Then
                                If VpQteFoil > 0 Then
                                    VpConverted.WriteLine(VpO.ToString + "#" + (VpQte - VpQteFoil).ToString + "##False")
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQteFoil.ToString + "##True")
                                Else
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False")
                                End If
                            Else
                                VpNeedLog = True
                                'Partial match
                                VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where ('" + VpName.Replace("'", "''") + "' Like '%' + Card.Title + '%' Or Card.Title Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%') And InStr('" + VpEdition.Replace("'", "''") + "', Series.SeriesNM_UG) > 0;"
                                VpO = VgDBCommand.ExecuteScalar
                                If Not VpO Is Nothing Then
                                    VpLog.WriteLine("Partial match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                    If VpQteFoil > 0 Then
                                        VpConverted.WriteLine(VpO.ToString + "#" + (VpQte - VpQteFoil).ToString + "##False")
                                        VpConverted.WriteLine(VpO.ToString + "#" + VpQteFoil.ToString + "##True")
                                    Else
                                        VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##False")
                                    End If
                                Else
                                    VpLog.WriteLine("No match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                End If
                            End If
                        End If
                    End If
                End While
                VpConverted.Close
                VpLog.Close
                VpIn.Close
                If VpNeedLog Then
                    If mdlToolbox.ShowQuestion("Certaines cartes n'ont pas été trouvées..." + vbCrLf + "Voulez-vous afficher le journal ?") = System.Windows.Forms.DialogResult.Yes Then
                        Process.Start(VpPath.ToLower.Replace(mdlConstGlob.CgFExtL, mdlConstGlob.CgPicLogExt))
                    End If
                End If
                'Une fois la conversion effectuée, on rappelle l'importation sur le fichier au bon format
                Call Me.GoImport(VpPath.ToLower.Replace(mdlConstGlob.CgFExtL, mdlConstGlob.CgFExtO), VpSource, False)
            '** Gestion format Magic Collection ou Magic Arena **
            Case mdlConstGlob.CgFExtC
                VpLog = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtC, mdlConstGlob.CgPicLogExt))
                VpConverted = New StreamWriter(VpPath.ToLower.Replace(mdlConstGlob.CgFExtC, mdlConstGlob.CgFExtO))
                VpReserve = False
                While Not VpIn.EndOfStream
                    VpStr = VpIn.ReadLine
                    'Cas 1 : Magic Collection
                    If VpStr.Contains(";") Then
                        VpStrs = VpStr.Split(";")
                        If VpStrs.Length >= 7 AndAlso IsNumeric(VpStrs(6)) Then
                            VpQte = CInt(Val(VpStrs(6)))
                            VpEdition = VpStrs(3).Replace("PO2", "P02")
                            VpName = VpStrs(0).Replace(" (1)", "").Replace(" (2)", "").Replace(" (3)", "").Replace(" (4)", "").Replace(" (5)", "").Replace(" (6)", "").Replace(" (7)", "").Replace(" (8)", "")
                            VpFoil = False  'à gérer proprement : on a l'info mais chaque ligne peut contenir simultanément des foils et des non-foils
                            'Exact match
                            VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where Title = '" + VpName.Replace("'", "''") + "' And SeriesCD_MO = '" + VpEdition + "';"
                            VpO = VgDBCommand.ExecuteScalar
                            If VpO Is Nothing Then
                                VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where Title = '" + VpName.Replace("'", "''") + "' And SeriesCD_MW = '" + VpEdition + "';"
                                VpO = VgDBCommand.ExecuteScalar
                            End If
                            If Not VpO Is Nothing Then
                                VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##" + VpFoil.ToString)
                            Else
                                VpNeedLog = True
                                'Partial match
                                VgDBCommand.CommandText = "Select EncNbr From Card Inner Join Series On Card.Series = Series.SeriesCD Where ('" + VpName.Replace("'", "''") + "' Like '%' + Title + '%' Or Title Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%') And ( SeriesCD_MO = '" + VpEdition + "' Or SeriesCD_MW = '" + VpEdition + "' );"
                                VpO = VgDBCommand.ExecuteScalar
                                If Not VpO Is Nothing Then
                                    VpLog.WriteLine("Partial match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##" + VpFoil.ToString)
                                Else
                                    VpLog.WriteLine("No match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                End If
                            End If
                        End If
                    'Cas 2 : Magic Arena
                    ElseIf VpStr.Contains(" ") Then
                        VpStrs = VpStr.Split(" ")
                        If VpStrs.Length >= 4 AndAlso IsNumeric(VpStrs(0)) Then
                            VpQte = CInt(Val(VpStrs(0)))
                            VpEdition = VpStrs(VpStrs.Length - 2).Replace("(", "").Replace(")", "")
                            VpName = ""
                            For VpI As Integer = 1 To VpStrs.Length - 3
                                VpName += VpStrs(VpI) + " "
                            Next VpI
                            VpName = VpName.Trim
                            VpFoil = False  'à gérer ultérieurement
                            'Exact match
                            VgDBCommand.CommandText = "Select Card.EncNbr From (Card Inner Join Series On Card.Series = Series.SeriesCD) Inner Join CardFR On Card.EncNbr = CardFR.EncNbr Where (Title = '" + VpName.Replace("'", "''") + "' Or TitleFR = '" + VpName.Replace("'", "''") + "') And SeriesCD_MO = '" + VpEdition + "';"
                            VpO = VgDBCommand.ExecuteScalar
                            If VpO Is Nothing Then
                                VgDBCommand.CommandText = "Select Card.EncNbr From (Card Inner Join Series On Card.Series = Series.SeriesCD) Inner Join CardFR On Card.EncNbr = CardFR.EncNbr Where (Title = '" + VpName.Replace("'", "''") + "' Or TitleFR = '" + VpName.Replace("'", "''") + "') And SeriesCD_MW = '" + VpEdition + "';"
                                VpO = VgDBCommand.ExecuteScalar
                            End If
                            If Not VpO Is Nothing Then
                                VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##" + VpFoil.ToString + "#" + VpReserve.ToString)
                            Else
                                VpNeedLog = True
                                'Partial match
                                VgDBCommand.CommandText = "Select Card.EncNbr From (Card Inner Join Series On Card.Series = Series.SeriesCD) Inner Join CardFR On Card.EncNbr = CardFR.EncNbr Where ('" + VpName.Replace("'", "''") + "' Like '%' + Title + '%' Or Title Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%' Or '" + VpName.Replace("'", "''") + "' Like '%' + TitleFR + '%' Or TitleFR Like '%" + mdlToolbox.StrDiacriticInsensitize(VpName.Replace("'", "''")) + "%') And ( SeriesCD_MO = '" + VpEdition + "' Or SeriesCD_MW = '" + VpEdition + "' );"
                                VpO = VgDBCommand.ExecuteScalar
                                If Not VpO Is Nothing Then
                                    VpLog.WriteLine("Partial match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                    VpConverted.WriteLine(VpO.ToString + "#" + VpQte.ToString + "##" + VpFoil.ToString + "#" + VpReserve.ToString)
                                Else
                                    VpLog.WriteLine("No match for card: " + VpName.ToString + " - " + VpEdition.ToString)
                                End If
                            End If
                        End If
                    ElseIf VpStr = ""
                        VpReserve = True
                    End If
                End While
                VpConverted.Close
                VpLog.Close
                VpIn.Close
                If VpNeedLog Then
                    If mdlToolbox.ShowQuestion("Certaines cartes n'ont pas été trouvées..." + vbCrLf + "Voulez-vous afficher le journal ?") = System.Windows.Forms.DialogResult.Yes Then
                        Process.Start(VpPath.ToLower.Replace(mdlConstGlob.CgFExtC, mdlConstGlob.CgPicLogExt))
                    End If
                End If
                'Une fois la conversion effectuée, on rappelle l'importation sur le fichier au bon format
                Call Me.GoImport(VpPath.ToLower.Replace(mdlConstGlob.CgFExtC, mdlConstGlob.CgFExtO), VpSource, False)
            Case Else
                Call mdlToolbox.ShowWarning("Format non pris en charge...")
        End Select
    End Sub
    Private Function GetExtension As String
        Select Case VmFormat
            Case mdlConstGlob.eFormat.Apprentice
                Return mdlConstGlob.CgFExtA
            Case mdlConstGlob.eFormat.MTGM
                Return mdlConstGlob.CgFExtO
            Case mdlConstGlob.eFormat.MTGMv2
                Return mdlConstGlob.CgFExtN
            Case mdlConstGlob.eFormat.MTGArena
                Return mdlConstGlob.CgFExtC
            Case mdlConstGlob.eFormat.MWS
                Return mdlConstGlob.CgFExtW
            Case mdlConstGlob.eFormat.UrzaGatherer
                Return mdlConstGlob.CgFExtU
            Case mdlConstGlob.eFormat.Web
                Return mdlConstGlob.CgFExtH
            Case Else
                Return ""
        End Select
    End Function
    Public Sub InitImport(VpFile As String)
        Me.grpImport.Visible = True
        Me.grpExport.Visible = False
        Me.txtFileImp.Text = VpFile
        Me.txtSourceImp.Text = Me.txtFileImp.Text.Substring(Me.txtFileImp.Text.LastIndexOf("\") + 1)
        Me.txtSourceImp.Text = Me.txtSourceImp.Text.Replace(mdlConstGlob.CgFExtN, "").Replace(mdlConstGlob.CgFExtO, "").Replace(mdlConstGlob.CgFExtM, "").Replace(mdlConstGlob.CgFExtW, "").Replace(mdlConstGlob.CgFExtL, "")
        If Me.txtSourceImp.Text.Length > 50 Then Me.txtSourceImp.Text = Me.txtSourceImp.Text.Substring(0, 50)
    End Sub
    Sub CmdExportClick(ByVal sender As Object, ByVal e As EventArgs)
    Dim VpSources As List(Of String)
    Dim VpPath As String = ""
    Dim VpInfo As String = ""
        If Me.lstchkSources.CheckedItems.Count > 0 Then
            Me.dlgBrowser.ShowDialog
            If Me.dlgBrowser.SelectedPath <> "" Then
                VmFormat = CType(Me.cboFormat.SelectedIndex, mdlConstGlob.eFormat)
                If VmFormat = mdlConstGlob.eFormat.Web Then
                    VpSources = New List(Of String)
                    For Each VpSource As String In Me.lstchkSources.CheckedItems
                        VpSources.Add(VpSource)
                    Next VpSource
                    Call Me.GoExportWeb(Me.dlgBrowser.SelectedPath, VpSources)
                Else
                    For Each VpSource As String In Me.lstchkSources.CheckedItems
                        VpPath = Me.dlgBrowser.SelectedPath + "\" + mdlToolbox.AvoidForbiddenChr(VpSource, mdlConstGlob.eForbiddenCharset.Full) + Me.GetExtension
                        If VmFormat = mdlConstGlob.eFormat.UrzaGatherer Then
                            Call Me.GoExportJSON(VpPath, VpSource)
                        Else
                            Call Me.GoExport(VpPath, VpSource)
                        End If
                    Next VpSource
                    If VmFormat = mdlConstGlob.eFormat.MTGArena AndAlso Me.lstchkSources.CheckedItems.Count = 1 AndAlso File.Exists(VpPath) Then
                        Clipboard.SetDataObject((New StreamReader(VpPath)).ReadToEnd)
                        VpInfo += "La liste a été copiée dans le presse-papier." + vbCrLf + vbCrLf
                    End If
                End If
                VpInfo += "Exportation terminée."
                Call mdlToolbox.ShowInformation(VpInfo)
                Me.Close
            End If
        End If
    End Sub
    Sub FrmExportLoad(ByVal sender As Object, ByVal e As EventArgs)
        Call Me.SourcesLoad
        Me.TopMost = True
        'Astuce horrible pour contourner un bug de mise à l'échelle automatique en fonction de la densité de pixels
        If Me.CreateGraphics().DpiX <> 96 Then
            Me.grpExport.Dock = DockStyle.None
            Me.grpImport.Dock = DockStyle.None
        End If
    End Sub
    Sub BtExportActivate(ByVal sender As Object, ByVal e As EventArgs)
        Me.grpExport.Visible = True
        Me.btImport.Checked = False
        Me.grpImport.Visible = False
        Me.btExport.Checked = True
    End Sub
    Sub BtImportActivate(ByVal sender As Object, ByVal e As EventArgs)
        Me.grpImport.Visible = True
        Me.btExport.Checked = False
        Me.grpExport.Visible = False
        Me.btImport.Checked = True
    End Sub
    Sub OptImpAddCheckedChanged(ByVal sender As Object, ByVal e As EventArgs)
        Me.lstImp.Enabled = Me.optImpAdd.Checked
        Me.txtSourceImp.Enabled = Me.optImpNew.Checked
    End Sub
    Sub OptImpNewCheckedChanged(ByVal sender As Object, ByVal e As EventArgs)
        Me.lstImp.Enabled = Me.optImpAdd.Checked
        Me.txtSourceImp.Enabled = Me.optImpNew.Checked
    End Sub
    Sub CbarImpExpMouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)
        VmFormMove = True
        VmCanClose = True
        VmMousePos = New Point(e.X, e.Y)
    End Sub
    Sub CbarImpExpMouseMove(ByVal sender As Object, ByVal e As MouseEventArgs)
        If VmFormMove Then
            Me.Location = New Point(MousePosition.X - VmMousePos.X, MousePosition.Y - VmMousePos.Y)
        End If
    End Sub
    Sub CbarImpExpMouseUp(ByVal sender As Object, ByVal e As MouseEventArgs)
        VmFormMove = False
    End Sub
    Sub CbarImpExpVisibleChanged(ByVal sender As Object, ByVal e As EventArgs)
        If VmCanClose Then
            Me.Close
        End If
    End Sub
    Sub CmdBrowseClick(ByVal sender As Object, ByVal e As EventArgs)
        Me.dlgFileBrowser.ShowDialog
        Call Me.InitImport(Me.dlgFileBrowser.FileName)
    End Sub
    Sub CmdImportClick(ByVal sender As Object, ByVal e As EventArgs)
    Dim VpOK As Boolean
        'Vérification de la validité de la demande
        VpOK = File.Exists(Me.txtFileImp.Text)
        If Me.optImpNew.Checked Then
            If Me.txtSourceImp.Text.Trim = "" Then
                VpOK = False
            End If
        Else
            If Me.lstImp.SelectedIndex < 0 Then
                VpOK = False
            End If
        End If
        If VpOK Then
            'Importation effective
            If Me.optImpNew.Checked Then
                For Each VpD As String In Me.lstImp.Items
                    If VpD.ToLower = Me.txtSourceImp.Text.ToLower Then
                        Call mdlToolbox.ShowWarning("Un deck portant ce nom existe déjà...")
                        Exit Sub
                    End If
                Next VpD
                Call Me.GoImport(Me.txtFileImp.Text, Me.txtSourceImp.Text, True)
            Else
                Call Me.GoImport(Me.txtFileImp.Text, Me.lstImp.SelectedItem.ToString, False)
            End If
            Call Me.SourcesLoad
            'Information utilisateur
            Call mdlToolbox.ShowInformation("Importation terminée.")
            VmMustReload = True
        Else
            Call mdlToolbox.ShowWarning("Toutes les informations n'ont pas été saisies...")
        End If
    End Sub
    Sub FrmExportFormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs)
        If VmMustReload And e.CloseReason = CloseReason.UserClosing Then
            Me.Visible = False
            Call VmOwner.LoadMnu
            Call VmOwner.LoadTvw
        End If
    End Sub
End Class
